using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace linq2
{



    public class Student
    {
        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int Age { get; set; }
        public int StandardID { get; set; }
    }
    public class Standard
    {
        public int StandardID { get; set; }
        public string StandardName { get; set; }
    }
    public class Employee
    {
        public int EmployeeID { get; set; }
        public int EmployeeGroup { get; set; }
    }


    class Program
    {
        static void Main(string[] args)
        {


            //////Implement the LINQ on *Collection*

            IList<Student> studentList = new List<Student>()
         {
                 new Student() { StudentID = 1, StudentName = "John", Age = 18, StandardID = 1 } ,
                new Student() { StudentID = 2, StudentName = "Steve",  Age = 21, StandardID = 1 } ,
                new Student() { StudentID = 3, StudentName = "Bill",  Age = 18, StandardID = 2 } ,
                 new Student() { StudentID = 4, StudentName = "Ram" , Age = 20, StandardID = 2 } ,
                 new Student() { StudentID = 5, StudentName = "Ron" , Age = 21,StandardID=3 }
        };

            IList<Standard> standardList = new List<Standard>() {
                new Standard(){ StandardID = 1, StandardName="Standard 1"},
                 new Standard(){ StandardID = 2, StandardName="Standard 2"},
                 new Standard(){ StandardID = 3, StandardName="Standard 3"}
        };

            IList<Employee> EmployeeList = new List<Employee>()
            {
                new Employee(){EmployeeID=21,EmployeeGroup=20}
            };
            //multiple where and select operator

            var studentNames = studentList.Where(s => s.Age > 18)
                                  .Select(s => s)
                                  .Where(st => st.StandardID > 0)
                                  .Select(s => s.StudentName);


            //returning of anonymous object

            var teenStudentsName = from s in studentList
                                   where s.Age > 12 && s.Age < 20
                                   select new { StudentName = s.StudentName };

            teenStudentsName.ToList().ForEach(s => Console.WriteLine(s.StudentName));





            //execution_GroupBy 
            var EmployeeGroupByBatch = from e in EmployeeList
                                       group e by e.EmployeeID into sb
                                       orderby sb.Key
                                       select new { sb.Key, sb };


            //query_Groupby 

            var studentsGroupByStandard = from s in studentList
                                          group s by s.StandardID into sg
                                          orderby sg.Key
                                          select new { sg.Key, sg };


            foreach (var group in studentsGroupByStandard)
            {
                Console.WriteLine("StandardID {0}:", group.Key);

                group.sg.ToList().ForEach(st => Console.WriteLine(st.StudentName));
            }



            //Outer Join
            var studentWithStandard = from s1 in studentList
                                      join s in studentList
                                      on s1.StandardID equals s.StandardID
                                      into eg
                                      select new
                                      {
                                          StudentName = s1.StudentName,
                                          student = eg
                                      };

            studentWithStandard.ToList().ForEach(s => Console.WriteLine("{0} is in {1}", s.StudentName, s.student));

             ///inner join

             var studentWithStandard1 = from s in studentList
                                      join stad in standardList
                                      on s.StandardID equals stad.StandardID
                                      select new
                                      {
                                          StudentName = s.StudentName,
                                          StandardName = stad.StandardName
                                      };

            studentWithStandard1.ToList().ForEach(s => Console.WriteLine("{0} is in {1}", s.StudentName, s.StandardName));





            //Left Outer Join


            var studentsGroup = from stad in standardList
                                join s in studentList
                                on stad.StandardID equals s.StandardID
                                    into sg
                                select new
                                {
                                    StandardName = stad.StandardName,
                                    Students = sg
                                };

            foreach (var group in studentsGroup)
            {
                Console.WriteLine(group.StandardName);

                group.Students.ToList().ForEach(st => Console.WriteLine(st.StudentName));
            }







            ////sorting


            var sortedStudents = from s in studentList
                                 orderby s.StandardID, s.Age
                                 select new
                                 {
                                     StudentName = s.StudentName,
                                     Age = s.Age,
                                     StandardID = s.StandardID
                                 };

            sortedStudents.ToList().ForEach(s => Console.WriteLine("Student Name: {0}, Age: {1}, StandardID: {2}", s.StudentName, s.Age, s.StandardID));



           


            Console.ReadKey();

        }
    }

}






              